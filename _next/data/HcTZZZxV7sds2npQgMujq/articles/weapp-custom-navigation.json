{"pageProps":{"articleData":{"markdownContent":"\n> 最近在开发小程序，因为会一点react，所以选择taro作为开发工具。根据UI给的设计图看到有定制的Navigation，查了一些资料，顺手记录下来，后续容易找到快速恢复记忆。\n\n### 安装mobx和mobx-react-lite\n这里我使用了mobx作为状态管理，安装了以下库：\n```shell\npnpm install mobx\npnpm install mobx-react-lite\n```\n通过mobx获取和管理Navigation的高度、内容区的高度、底部tabbar的高度等。\n\n### 创建获取数据的类Screen\n\n首先我创建了一个类Screen：\n```js\nimport Taro from '@tarojs/taro'\nimport { makeAutoObservable } from \"mobx\";\nclass Screen {\n  // menuButton 高度\n  menuButtonHeight = 0\n  // menuButton 到顶部的高度\n  menuButtonTop = 0\n  // menuButton左边的宽度(去掉了右边间距)\n  menuButtonLeftWidth = 0\n  // 顶部navigation的高度\n  navigationHeight = 0\n  // menuButton右边间距\n  menuButtonRightWidth = 0\n  // 去掉底部tabbar和顶部navigation bar的高度\n  contentHeightWithTabbar = 0\n  // 去掉顶部navigation bar的高度\n  contentHeightWithOutTabbar = 0\n\n  // rpx和px转换时使用\n  pixelRatio = 0\n\n  constructor() {\n    const menuButtonInfo = Taro.getMenuButtonBoundingClientRect();\n    const systemInfo = Taro.getSystemInfoSync();\n    // menuButton 高度\n    this.menuButtonHeight = menuButtonInfo.height\n    // menuButton 到顶部的高度\n    this.menuButtonTop = menuButtonInfo.top\n    // Navigation的高度 = (menuButton的顶部位置 - 状态栏高度) * 2 + menuButton的高度 + 状态栏高度\n    this.navigationHeight = (menuButtonInfo.top - systemInfo.statusBarHeight) * 2 + menuButtonInfo.height + systemInfo.statusBarHeight\n    // menuButton右边宽度 = 屏幕宽度 - menuButton右边的位置\n    this.menuButtonRightWidth = systemInfo.screenWidth - menuButtonInfo.right\n    // menuButton左边宽度 = menuButton左边的位置 - menuButton右边宽度\n    this.menuButtonLeftWidth = menuButtonInfo.left - this.menuButtonRightWidth\n    // 含有tabbar的内容区域高度 = 屏幕高度 - navigation高度 - 60(tabbar固定50px，我这里多减出10) - (屏幕高度 - 安全区域底部位置)\n    this.contentHeightWithTabbar = systemInfo.screenHeight - this.navigationHeight - 60 - (systemInfo.screenHeight - systemInfo.safeArea.bottom)\n    // 不含有tabbar的内容区域高度 = 屏幕高度 - navigation高度 - (屏幕高度 - 安全区域底部位置)\n    this.contentHeightWithOutTabbar = systemInfo.screenHeight - this.navigationHeight - (systemInfo.screenHeight - systemInfo.safeArea.bottom)\n    // 这里计算出rpx和px的转换率\n    this.pixelRatio = 750 / systemInfo.windowWidth\n    makeAutoObservable(this, {}, {autoBind: true})\n  }\n}\n```\n\n你也可以根据一下两个\n```js\nconst menuButtonInfo = Taro.getMenuButtonBoundingClientRect();\nconst systemInfo = Taro.getSystemInfoSync();\n```\n信息获取更多你需要的值，然后应用到你的页面的中。\n\n### 将Screen应用到app中\n\n开始使用screen这个类把获取的数据应用到对应的页面。\n直接上代码：\n```js\nimport { createContext, useContext } from \"react\"\nimport Screen from \"./screen\"\n\n// 创建一个类来管理所有的值\nclass RootStore {\n  constructor() {\n    this.screen =  new Screen()\n  }\n}\n\n// 初始化RootStore\nconst rootStore = new RootStore()\n\n// 创建上下文对象\nconst RootStoreContext = createContext()\n// 根据上下文对象封装一个组件\nconst RootStoreProvider = ({children}) => {\n  return (\n    <RootStoreContext.Provider value={rootStore}>\n      {children}\n    </RootStoreContext.Provider>\n  )\n}\n\n// 默认导出 provider\nexport default RootStoreProvider\n\n// 封装一个获取上下文对象的方法\nexport const useRootStore = () => useContext(RootStoreContext)\n```\n\n在入口文件中使用：\n```js\nimport { useLaunch } from '@tarojs/taro'\nimport './app.scss'\nimport RootStoreProvider from './store'\n\n\nfunction App({ children }) {\n\n  useLaunch(() => {\n    console.log('App launched.')\n  })\n\n  // children 是将要会渲染的页面\n  return <RootStoreProvider>{children}</RootStoreProvider>\n}\n\nexport default App\n```\n\n我们可以提出一个定制的navigation组件来,在用到的地方引入使用即可：\n```js\nimport Taro from '@tarojs/taro'\nimport { View, Image } from '@tarojs/components'\nimport { observer } from 'mobx-react-lite'\nimport { useRootStore } from '../store'\n\nimport returnBack from \"../resource/return_back.png\"\n\nconst Navigation = observer(({title, showback}) => {\n  const { screen } = useRootStore()\n\n  const goBackBtn = () => {\n    Taro.navigateBack()\n  }\n\n  return (\n    <>\n      <View\n        className='custom-navigation'\n        style={{\n          left: `${screen.menuButtonRightWidth}px`,\n          top: `${screen.menuButtonTop}px`,\n          height: `${screen.menuButtonHeight}px`,\n          width: `${screen.navigationWidth}px`,\n        }}>\n        {\n          showback ? <View className=\"back-btn\" onClick={() => goBackBtn()}><Image src={returnBack} className=\"icon-36-50\" /></View> : null\n        }\n        <View className='fixed font36 bold white center width100'>{title}</View>\n      </View>\n      <View style={{height: `${screen.navigationHeight}px`}}></View>\n    </>\n  )\n})\n\nexport default Navigation\n```\n\n以上就是主要代码和逻辑；大体流程就是，\n1. 通过mobx管理，使用微信给的接口获取navigation需要相关信息\n2. 封装上下文\n3. 通过上下文把信息传递给需要使用信息的组件\n\n","title":"微信小程序定制Navigation","slug":"weapp-custom-navigation","intro":"通过","tags":"taro, 微信小程序, 定制Navigation, mobx","date":"2023-12-04"}},"__N_SSG":true}