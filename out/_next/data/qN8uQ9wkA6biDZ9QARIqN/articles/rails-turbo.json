{"pageProps":{"articleData":{"markdownContent":"\n#### Turbo Drive\n默认情况下，Turbo Drive 通过将所有链接点击和表单提交转换为 AJAX 请求来加速我们的 Ruby on Rails 应用程序。\n\n##### Turbo Drive 是怎么工作的？\nTurbo Drive 的工作原理是拦截链接上的“点击”事件和表单上的“提交”事件。\n每次单击链接时，Turbo Drive 都会拦截“单击”事件，通过将链接单击通常会触发的 HTML 请求转换为 AJAX 请求来覆盖默认行为。\n\n当 Turbo Drive 收到响应时，它会将当前页面的 <body> 替换为响应的 <body>，在大多数情况下保持 <head> 不变\n\n无效的表单提交必须返回 422 状态代码，以便 Turbo Drive 替换页面的 <body> 并显示表单错误。 Rails 中 422 状态代码的别名是：unprocessable_entity。\n\n要在链接或表单上禁用 Turbo Drive，我们需要在其上添加 data-turbo=\"false\" 数据属性。\n\n也可以为整个应用程序禁用 Turbo Drive，如下：\n```js\n// app/javascript/application.js\nimport { Turbo } from \"@hotwired/turbo-rails\"\nTurbo.session.drive = false\n```\n不建议全局关闭。\n\ndata-turbo-track=\"reload\"可以重载页面, 比如我们增加了新的css并且需要使用的人重载页面才可以加载\n\n\n#### Turbo Frame\nTurbo Frames 是网页的独立部分，无需完整的页面刷新和编写一行 JavaScript 即可附加、前置、替换或删除！\n\nTurbo Frames 的一些规则:\n1. 当点击 Turbo Frame 中的链接时，如果目标页面上有相同 id 的 frame，Turbo 会将源页面 Turbo Frame 的内容替换为目标页面 Turbo Frame 的内容。\n2. 当点击 Turbo Frame 内的链接时，如果目标页面上没有相同 id 的 Turbo Frame，Turbo 将从源页面中删除 Turbo Frame 的内容，并且在浏览器控制台中报错误 没有匹配的<turbo-frame id=\"name_of_the_frame\">；\n3. 由于 data-turbo-frame 数据属性，链接可以指向它不直接嵌套的 Turbo Frame。在这种情况下，与源页面上的 data-turbo-frame 数据属性具有相同 id 的 Turbo Frame 将被替换为与目标页面上的 data-turbo-frame 数据属性具有相同 id 的 Turbo Frame。\n\n注意:\ndata-turbo-frame=\"_top\", 使用“_top”关键字时，页面的 URL 会更改为目标页面的 URL, 替换整个页面，这是与使用常规 Turbo Frame 时的另一个不同之处。\n\n#### Turbo Stream\n\nturbo_stream 响应的方法，可以执行以下操作：\n```ruby\n  # 删除Turbo Frame\n  turbo_stream.remove\n\n  # 在列表的开头/结尾插入 Turbo Frame\n  turbo_stream.append\n  turbo_stream.prepend\n\n  # Turbo Frame 之前/之后插入一个 Turbo Frame\n  turbo_stream.before\n  turbo_stream.after\n\n  # 更新或替换 Turbo Frame 的内容\n  turbo_stream.update\n  turbo_stream.replace\n```\n\n通过结合使用 Turbo Frames 和新的 TURBO_STREAM 格式，我们将能够对网页的各个部分执行精确的操作，而无需编写一行 JavaScript，从而保留网页的状态。\n\n#### turbo_stream_from\n例如想在表User数据创建之后，想把这个数据即时更新到订阅的页面上则可以通过下面的例子操作：\n1. 首页在A页面上添加订阅,以及A页面上该追加的地方\n```ruby\n# 订阅代码\n<%= turbo_stream_from \"users\" %> \n\n# 对应追加的地方\n<%= turbo_frame_tag \"user_list\" %>\n<%= render @users %>\n<% end %>\n```\n上面代码订阅了“users”流。\n\n2. 在表中添加创建之后推送代码:\n```ruby\nclass User < ApplicationRecord\n  after_create_commit -> { broadcast_prepend_to \"users\", partial: \"users/user\", locals: { user: self}, target: \"user_list }\nend\n```\n这时候就会在创建成功后自动把数据插入到`user_list`内部的最前方.","title":"Turbo Rails的使用方法","slug":"rails-turbo","intro":"turbo-drive、turbo-frame、turbo-stream的一些使用方法记录, turbo-rails库的强大功能编写响应式单页","tags":"rails, turbo","date":"2023-06-09","link":"https://www.hotrails.dev/turbo-rails"}},"__N_SSG":true}